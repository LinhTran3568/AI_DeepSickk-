#!/usr/bin/env python3
"""
Bitcoin AI Trading Bot - Main Entry Point
H·ªá th·ªëng AI trading bot cho Bitcoin v·ªõi Puter AI (mi·ªÖn ph√≠)
"""

import asyncio
import sys
import os
from pathlib import Path

# Add project root to Python path
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root))

from config.settings import Settings
from utils.logger import setup_logger
from ai_engine.puter_client import PuterAIClient
from trading.exchange import ExchangeManager
from trading.signals import SignalGenerator
from trading.risk_manager import RiskManager
from data.collector import DataCollector
from utils.notifications import NotificationManager

logger = setup_logger(__name__)

class BitcoinTradingBot:
    """Bitcoin AI Trading Bot ch√≠nh"""
    
    def __init__(self):
        """Kh·ªüi t·∫°o bot"""
        self.settings = Settings()
        
        # Ch·ªâ s·ª≠ d·ª•ng Puter AI - Mi·ªÖn ph√≠, kh√¥ng c·∫ßn API key
        self.ai_client = PuterAIClient()
        
        self.exchange = ExchangeManager()
        self.signal_generator = SignalGenerator()
        self.risk_manager = RiskManager()
        self.data_collector = DataCollector()
        self.notifications = NotificationManager()
        
        self.is_running = False
        
    async def initialize(self):
        """Kh·ªüi t·∫°o c√°c component"""
        logger.info("üöÄ ƒêang kh·ªüi t·∫°o Bitcoin AI Trading Bot...")
        
        try:
            # Kh·ªüi t·∫°o Puter AI - lu√¥n s·∫µn s√†ng
            logger.info("üéØ Kh·ªüi t·∫°o Puter AI - Mi·ªÖn ph√≠, kh√¥ng c·∫ßn API key")
            await self.ai_client.test_connection()
            logger.info("‚úÖ Puter AI s·∫µn s√†ng")
            
            # Initialize exchange connection
            await self.exchange.initialize()
            logger.info("‚úÖ Exchange k·∫øt n·ªëi th√†nh c√¥ng")
            
            # Setup data collector
            await self.data_collector.initialize()
            logger.info("‚úÖ Data collector s·∫µn s√†ng")
            
            # Test notification system
            self.notifications.send_info("Bitcoin AI Trading Bot ƒë√£ kh·ªüi ƒë·ªông!")
            logger.info("‚úÖ Notification system ho·∫°t ƒë·ªông")
            
            logger.info("üéâ Bot kh·ªüi t·∫°o th√†nh c√¥ng!")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå L·ªói kh·ªüi t·∫°o bot: {e}")
            return False
    
    async def run_trading_cycle(self):
        """Chu k·ª≥ trading ch√≠nh"""
        try:
            # 1. Thu th·∫≠p d·ªØ li·ªáu market
            market_data = await self.data_collector.get_market_data()
            
            # 2. Ph√¢n t√≠ch AI v·ªõi Puter AI
            ai_analysis = await self.ai_client.analyze_market(market_data)
            
            # 3. T·∫°o signals t·ª´ technical analysis
            technical_signals = await self.signal_generator.generate_signals(market_data)
            
            # 4. K·∫øt h·ª£p AI analysis v√† technical signals
            combined_signal = await self.signal_generator.combine_signals(
                ai_analysis, technical_signals
            )
            
            # 5. Ki·ªÉm tra risk management
            risk_check = await self.risk_manager.evaluate_risk(combined_signal)
            
            # 6. Th·ª±c hi·ªán trade n·∫øu signal h·ª£p l·ªá
            if risk_check['approved']:
                trade_result = await self.execute_trade(combined_signal)
                if trade_result:
                    self.notifications.send_trade_alert(trade_result)
            
            # 7. C·∫≠p nh·∫≠t portfolio v√† metrics
            await self.update_portfolio_metrics()
            
        except Exception as e:
            logger.error(f"‚ùå L·ªói trong trading cycle: {e}")
            self.notifications.send_error(f"Trading cycle error: {e}")
    
    async def execute_trade(self, signal):
        """Th·ª±c hi·ªán giao d·ªãch"""
        try:
            # Calculate position size based on risk management
            position_size = self.risk_manager.calculate_position_size(signal)
            
            # Place order through exchange
            if signal['action'] == 'BUY':
                result = await self.exchange.place_buy_order(
                    symbol=self.settings.TRADING_PAIR,
                    amount=position_size,
                    price=signal['entry_price']
                )
            elif signal['action'] == 'SELL':
                result = await self.exchange.place_sell_order(
                    symbol=self.settings.TRADING_PAIR,
                    amount=position_size,
                    price=signal['entry_price']
                )
            
            logger.info(f"üéØ Trade executed: {result}")
            return result
            
        except Exception as e:
            logger.error(f"‚ùå L·ªói execute trade: {e}")
            return None
    
    async def update_portfolio_metrics(self):
        """C·∫≠p nh·∫≠t metrics portfolio"""
        try:
            balance = await self.exchange.get_balance()
            positions = await self.exchange.get_positions()
            
            # Update portfolio tracking
            # TODO: Implement portfolio metrics calculation
            
        except Exception as e:
            logger.error(f"‚ùå L·ªói update portfolio: {e}")
    
    async def run(self):
        """Ch·∫°y bot ch√≠nh"""
        if not await self.initialize():
            logger.error("‚ùå Bot kh·ªüi t·∫°o th·∫•t b·∫°i!")
            return
        
        self.is_running = True
        logger.info("ü§ñ Bitcoin AI Trading Bot ƒëang ch·∫°y...")
        
        try:
            while self.is_running:
                await self.run_trading_cycle()
                
                # Ngh·ªâ gi·ªØa c√°c cycle (30 gi√¢y)
                await asyncio.sleep(30)
                
        except KeyboardInterrupt:
            logger.info("üëã Bot ƒëang d·ª´ng...")
        except Exception as e:
            logger.error(f"‚ùå L·ªói runtime: {e}")
        finally:
            await self.shutdown()
    
    async def shutdown(self):
        """T·∫Øt bot an to√†n"""
        self.is_running = False
        logger.info("üõë Bitcoin AI Trading Bot ƒë√£ d·ª´ng")
        self.notifications.send_info("Bot ƒë√£ d·ª´ng ho·∫°t ƒë·ªông")

def main():
    """Entry point ch√≠nh"""
    try:
        # T·∫°o instance bot
        bot = BitcoinTradingBot()
        
        # Ch·∫°y bot
        asyncio.run(bot.run())
        
    except Exception as e:
        print(f"‚ùå L·ªói kh·ªüi ƒë·ªông bot: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()
