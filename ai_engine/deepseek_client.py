"""
DeepSeek API Client cho Bitcoin Trading Analysis
"""
import json
import logging
import aiohttp
import asyncio
from typing import Dict, List, Any, Optional
from datetime import datetime
from config.settings import Settings

logger = logging.getLogger(__name__)

class DeepSeekClient:
    """Client ƒë·ªÉ giao ti·∫øp v·ªõi DeepSeek API"""
    
    def __init__(self):
        self.settings = Settings()
        self.api_key = self.settings.DEEPSEEK_API_KEY
        self.base_url = self.settings.DEEPSEEK_API_BASE
        self.model = self.settings.DEEPSEEK_MODEL
        self.max_tokens = self.settings.DEEPSEEK_MAX_TOKENS
    
    async def test_connection(self) -> bool:
        """Test k·∫øt n·ªëi v·ªõi DeepSeek API"""
        try:
            # Check if API key is configured
            if not self.api_key or self.api_key == "your_valid_deepseek_api_key_here":
                logger.warning("‚ö†Ô∏è DeepSeek API key not configured - using fallback mode")
                return False
                
            test_prompt = "Hello, this is a connection test."
            response = await self._make_request(test_prompt)
            
            if response and 'choices' in response:
                logger.info("‚úÖ DeepSeek API connection successful")
                return True
            else:
                logger.error("‚ùå DeepSeek API connection failed")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå DeepSeek API test failed: {e}")
            return False
    
    async def analyze_market(self, market_data: Dict[str, Any]) -> Dict[str, Any]:
        """
        Ph√¢n t√≠ch th·ªã tr∆∞·ªùng Bitcoin v·ªõi AI
        
        Args:
            market_data: D·ªØ li·ªáu th·ªã tr∆∞·ªùng
            
        Returns:
            K·∫øt qu·∫£ ph√¢n t√≠ch AI
        """
        try:
            # Check if API is available
            if not self.api_key or self.api_key == "your_valid_deepseek_api_key_here":
                logger.info("ü§ñ Using fallback AI analysis (DeepSeek API not configured)")
                return self._get_fallback_analysis(market_data)
            
            # T·∫°o prompt ph√¢n t√≠ch chuy√™n s√¢u
            prompt = self._create_market_analysis_prompt(market_data)
            
            # G·ªçi DeepSeek API
            response = await self._make_request(prompt)
            
            # Parse k·∫øt qu·∫£
            analysis = self._parse_analysis_response(response)
            
            logger.info(f"üß† AI Analysis completed: {analysis.get('action')} with {analysis.get('confidence'):.2%} confidence")
            
            return analysis
            
        except Exception as e:
            logger.error(f"‚ùå Market analysis failed: {e}")
            return self._get_fallback_analysis(market_data)
    
    async def analyze_pattern(self, price_data: List[float], timeframe: str) -> Dict[str, Any]:
        """
        Ph√¢n t√≠ch pattern bi·ªÉu ƒë·ªì
        
        Args:
            price_data: D·ªØ li·ªáu gi√°
            timeframe: Khung th·ªùi gian
            
        Returns:
            K·∫øt qu·∫£ ph√¢n t√≠ch pattern
        """
        try:
            prompt = self._create_pattern_analysis_prompt(price_data, timeframe)
            response = await self._make_request(prompt)
            
            return self._parse_pattern_response(response)
            
        except Exception as e:
            logger.error(f"‚ùå Pattern analysis failed: {e}")
            return {"pattern": "unknown", "confidence": 0.5}
    
    async def predict_trend(self, historical_data: Dict[str, Any]) -> Dict[str, Any]:
        """
        D·ª± ƒëo√°n xu h∆∞·ªõng ng·∫Øn h·∫°n
        
        Args:
            historical_data: D·ªØ li·ªáu l·ªãch s·ª≠
            
        Returns:
            D·ª± ƒëo√°n xu h∆∞·ªõng
        """
        try:
            prompt = self._create_trend_prediction_prompt(historical_data)
            response = await self._make_request(prompt)
            
            return self._parse_trend_response(response)
            
        except Exception as e:
            logger.error(f"‚ùå Trend prediction failed: {e}")
            return {"trend": "neutral", "confidence": 0.5, "timeframe": "1h"}
    
    def _create_market_analysis_prompt(self, market_data: Dict[str, Any]) -> str:
        """T·∫°o prompt ph√¢n t√≠ch th·ªã tr∆∞·ªùng"""
        current_price = market_data.get('price', 0)
        volume = market_data.get('volume', 0)
        rsi = market_data.get('rsi', 50)
        macd = market_data.get('macd', {})
        support_levels = market_data.get('support_levels', [])
        resistance_levels = market_data.get('resistance_levels', [])
        
        prompt = f"""
B·∫°n l√† m·ªôt chuy√™n gia ph√¢n t√≠ch Bitcoin trading v·ªõi kinh nghi·ªám 10+ nƒÉm. 
H√£y ph√¢n t√≠ch d·ªØ li·ªáu th·ªã tr∆∞·ªùng sau v√† ƒë∆∞a ra quy·∫øt ƒë·ªãnh giao d·ªãch:

TH√îNG TIN TH·ªä TR∆Ø·ªúNG:
- Gi√° hi·ªán t·∫°i: ${current_price:,.2f}
- Volume 24h: {volume:,.0f}
- RSI: {rsi:.2f}
- MACD: {macd}
- Support levels: {support_levels}
- Resistance levels: {resistance_levels}

Y√äU C·∫¶U PH√ÇN T√çCH:
1. Ph√¢n t√≠ch xu h∆∞·ªõng ng·∫Øn h·∫°n (1-4h)
2. ƒê√°nh gi√° m·ª©c ƒë·ªô r·ªßi ro hi·ªán t·∫°i
3. X√°c ƒë·ªãnh ƒëi·ªÉm v√†o l·ªánh t·ªëi ∆∞u
4. ƒê·ªÅ xu·∫•t stop loss v√† take profit
5. T√≠nh confidence score (0-1)

ƒê·ªäNH D·∫†NG TR·∫¢ L·ªúI (JSON):
{{
    "action": "BUY/SELL/HOLD",
    "confidence": 0.85,
    "entry_price": 45000,
    "stop_loss": 44100,
    "take_profit": 46800,
    "risk_level": "LOW/MEDIUM/HIGH",
    "timeframe": "1h",
    "reasoning": "L√Ω do chi ti·∫øt cho quy·∫øt ƒë·ªãnh",
    "key_factors": ["factor1", "factor2", "factor3"],
    "market_sentiment": "BULLISH/BEARISH/NEUTRAL"
}}

Ch·ªâ tr·∫£ l·ªùi b·∫±ng JSON, kh√¥ng th√™m text kh√°c.
"""
        return prompt
    
    def _create_pattern_analysis_prompt(self, price_data: List[float], timeframe: str) -> str:
        """T·∫°o prompt ph√¢n t√≠ch pattern"""
        recent_prices = price_data[-20:] if len(price_data) > 20 else price_data
        
        prompt = f"""
Ph√¢n t√≠ch pattern bi·ªÉu ƒë·ªì Bitcoin sau ƒë√¢y (timeframe {timeframe}):

D·ªØ li·ªáu gi√° g·∫ßn nh·∫•t (20 periods): {recent_prices}

X√°c ƒë·ªãnh:
1. Pattern ch√≠nh (Head & Shoulders, Triangle, Flag, etc.)
2. ƒê·ªô tin c·∫≠y c·ªßa pattern
3. H∆∞·ªõng breakout c√≥ th·ªÉ x·∫£y ra
4. Target price n·∫øu breakout

Tr·∫£ l·ªùi JSON format:
{{
    "pattern": "pattern_name",
    "confidence": 0.8,
    "breakout_direction": "UP/DOWN",
    "target_price": 46000,
    "pattern_completion": 0.7
}}
"""
        return prompt
    
    def _create_trend_prediction_prompt(self, historical_data: Dict[str, Any]) -> str:
        """T·∫°o prompt d·ª± ƒëo√°n xu h∆∞·ªõng"""
        prompt = f"""
D·ª±a tr√™n d·ªØ li·ªáu l·ªãch s·ª≠ Bitcoin sau, d·ª± ƒëo√°n xu h∆∞·ªõng ng·∫Øn h·∫°n:

{json.dumps(historical_data, indent=2)}

Ph√¢n t√≠ch v√† d·ª± ƒëo√°n:
1. Xu h∆∞·ªõng trong 1-4 gi·ªù t·ªõi
2. C√°c level price quan tr·ªçng
3. X√°c su·∫•t th√†nh c√¥ng

JSON format:
{{
    "trend": "BULLISH/BEARISH/NEUTRAL",
    "confidence": 0.75,
    "timeframe": "4h",
    "target_levels": [45000, 46000, 47000],
    "probability": 0.8
}}
"""
        return prompt
    
    async def _make_request(self, prompt: str) -> Optional[Dict[str, Any]]:
        """G·ª≠i request ƒë·∫øn DeepSeek API via OpenRouter"""
        try:
            headers = {
                "Authorization": f"Bearer {self.api_key}",
                "Content-Type": "application/json",
                "HTTP-Referer": "https://github.com/bitcoin-trading-bot",
                "X-Title": "Bitcoin Trading Bot"
            }
            
            payload = {
                "model": self.model,
                "messages": [
                    {
                        "role": "user",
                        "content": prompt
                    }
                ],
                "max_tokens": self.max_tokens,
                "temperature": 0.1,  # Low temperature for consistent analysis
                "stream": False
            }
            
            async with aiohttp.ClientSession(timeout=aiohttp.ClientTimeout(total=30)) as session:
                async with session.post(
                    f"{self.base_url}/chat/completions",
                    headers=headers,
                    json=payload
                ) as response:
                    
                    if response.status == 200:
                        return await response.json()
                    else:
                        error_text = await response.text()
                        logger.error(f"‚ùå DeepSeek API error {response.status}: {error_text}")
                        return None
                        
        except Exception as e:
            logger.error(f"‚ùå DeepSeek request failed: {e}")
            return None
    
    def _parse_analysis_response(self, response: Optional[Dict[str, Any]]) -> Dict[str, Any]:
        """Parse ph·∫£n h·ªìi ph√¢n t√≠ch t·ª´ AI"""
        if not response or 'choices' not in response:
            return self._get_default_analysis()
        
        try:
            content = response['choices'][0]['message']['content']
            
            # T√¨m JSON trong response
            start_idx = content.find('{')
            end_idx = content.rfind('}') + 1
            
            if start_idx >= 0 and end_idx > start_idx:
                json_str = content[start_idx:end_idx]
                analysis = json.loads(json_str)
                
                # Validate required fields
                required_fields = ['action', 'confidence', 'entry_price']
                if all(field in analysis for field in required_fields):
                    return analysis
            
            logger.warning("‚ö†Ô∏è Invalid AI response format, using default")
            return self._get_default_analysis()
            
        except Exception as e:
            logger.error(f"‚ùå Error parsing AI response: {e}")
            return self._get_default_analysis()
    
    def _parse_pattern_response(self, response: Optional[Dict[str, Any]]) -> Dict[str, Any]:
        """Parse ph·∫£n h·ªìi pattern analysis"""
        if not response:
            return {"pattern": "unknown", "confidence": 0.5}
        
        try:
            content = response['choices'][0]['message']['content']
            start_idx = content.find('{')
            end_idx = content.rfind('}') + 1
            
            if start_idx >= 0 and end_idx > start_idx:
                json_str = content[start_idx:end_idx]
                return json.loads(json_str)
                
        except Exception as e:
            logger.error(f"‚ùå Error parsing pattern response: {e}")
        
        return {"pattern": "unknown", "confidence": 0.5}
    
    def _parse_trend_response(self, response: Optional[Dict[str, Any]]) -> Dict[str, Any]:
        """Parse ph·∫£n h·ªìi trend prediction"""
        if not response:
            return {"trend": "neutral", "confidence": 0.5}
        
        try:
            content = response['choices'][0]['message']['content']
            start_idx = content.find('{')
            end_idx = content.rfind('}') + 1
            
            if start_idx >= 0 and end_idx > start_idx:
                json_str = content[start_idx:end_idx]
                return json.loads(json_str)
                
        except Exception as e:
            logger.error(f"‚ùå Error parsing trend response: {e}")
        
        return {"trend": "neutral", "confidence": 0.5}
    
    def _get_fallback_analysis(self, market_data: Dict[str, Any]) -> Dict[str, Any]:
        """Fallback AI analysis d·ª±a tr√™n rule-based logic"""
        try:
            current_price = market_data.get('price', 45000)
            rsi = market_data.get('rsi', 50)
            volume = market_data.get('volume', 0)
            avg_volume = market_data.get('avg_volume', 1000000)
            
            # Simple rule-based analysis
            action = "HOLD"
            confidence = 0.6
            reasoning = "Fallback analysis: "
            
            # RSI-based signals
            if rsi < 30:
                action = "BUY"
                confidence += 0.2
                reasoning += "RSI oversold, "
            elif rsi > 70:
                action = "SELL"  
                confidence += 0.2
                reasoning += "RSI overbought, "
            
            # Volume confirmation
            if volume > avg_volume * 1.5:
                confidence += 0.1
                reasoning += "high volume confirmation, "
            
            # Price level analysis
            support_levels = market_data.get('support_levels', [])
            resistance_levels = market_data.get('resistance_levels', [])
            
            if support_levels:
                nearest_support = max([s for s in support_levels if s < current_price], default=0)
                if nearest_support > 0 and (current_price - nearest_support) / current_price < 0.02:
                    action = "BUY" if action != "SELL" else action
                    confidence += 0.1
                    reasoning += "near support level, "
            
            if resistance_levels:
                nearest_resistance = min([r for r in resistance_levels if r > current_price], default=float('inf'))
                if nearest_resistance < float('inf') and (nearest_resistance - current_price) / current_price < 0.02:
                    action = "SELL" if action != "BUY" else action
                    confidence += 0.1
                    reasoning += "near resistance level, "
            
            # Cap confidence
            confidence = min(confidence, 0.85)
            
            return {
                "action": action,
                "confidence": confidence,
                "entry_price": current_price,
                "stop_loss": current_price * 0.98 if action == "BUY" else current_price * 1.02,
                "take_profit": current_price * 1.04 if action == "BUY" else current_price * 0.96,
                "risk_level": "MEDIUM",
                "timeframe": "1h",
                "reasoning": reasoning.rstrip(", "),
                "key_factors": ["rule_based_analysis", "technical_indicators"],
                "market_sentiment": "NEUTRAL"
            }
            
        except Exception as e:
            logger.error(f"‚ùå Fallback analysis failed: {e}")
            return self._get_default_analysis()
    
    def _get_default_analysis(self) -> Dict[str, Any]:
        """Tr·∫£ v·ªÅ ph√¢n t√≠ch m·∫∑c ƒë·ªãnh khi AI th·∫•t b·∫°i"""
        return {
            "action": "HOLD",
            "confidence": 0.5,
            "entry_price": 0,
            "stop_loss": 0,
            "take_profit": 0,
            "risk_level": "MEDIUM",
            "timeframe": "1h",
            "reasoning": "AI analysis unavailable, default to HOLD",
            "key_factors": ["ai_unavailable"],
            "market_sentiment": "NEUTRAL"
        }
